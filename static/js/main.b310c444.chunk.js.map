{"version":3,"sources":["components/Contributor.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","cardRoot","display","cardDetails","flexDirection","cardContent","flex","cardCover","width","ContributorCard","props","classes","Card","className","onClick","username","github","window","open","CardContent","Typography","component","variant","name","organization","color","college","quote","CardMedia","image","avatar","title","root","inline","listItem","justifyContent","Dashboard","List","contributors","map","contributor","ListItem","App","AppBar","position","Toolbar","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qsMAkBMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,SAAU,CACRC,QAAS,QAEXC,YAAa,CACXD,QAAS,OACTE,cAAe,UAEjBC,YAAa,CACXC,KAAM,YAERC,UAAW,CACTC,MAAO,UASE,SAASC,EAAgBC,GACtC,IAAMC,EAAUd,IAEhB,OACE,kBAACe,EAAA,EAAD,CACEC,UAAWF,EAAQV,SACnBa,QAAS,kBAVYC,EAUYL,EAAMM,YAT3CC,OAAOC,KAAP,6BAAkCH,GAAY,UADtB,IAACA,IAYrB,yBAAKF,UAAWF,EAAQR,aACtB,kBAACgB,EAAA,EAAD,CAAaN,UAAWF,EAAQN,aAC9B,kBAACe,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAChCZ,EAAMa,MAERb,EAAMc,cACL,kBAACJ,EAAA,EAAD,CAAYE,QAAQ,YAAYG,MAAM,iBACnCf,EAAMc,cAGVd,EAAMgB,SACL,kBAACN,EAAA,EAAD,CAAYE,QAAQ,YAAYG,MAAM,iBACnCf,EAAMgB,SAGVhB,EAAMiB,OACL,kBAACP,EAAA,EAAD,CAAYE,QAAQ,YAAYG,MAAM,iBAAtC,aACSf,EAAMiB,MADf,QAMN,kBAACC,EAAA,EAAD,CACEf,UAAWF,EAAQJ,UACnBsB,MAAK,UAlEK,aAkEL,yBAA+BnB,EAAMoB,QAAU,eACpDC,MAAOrB,EAAMa,QClErB,IAAM1B,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXgC,KAAM,CACJxB,MAAO,QAETyB,OAAQ,CACN/B,QAAS,UAEXgC,SAAU,CACRC,eAAgB,eAKP,SAASC,IACtB,IAAMzB,EAAUd,IAEhB,OACE,kBAACwC,EAAA,EAAD,CAAMxB,UAAWF,EAAQqB,MACtBM,EAAaC,KAAI,SAACC,GAAD,OAChB,kBAACC,EAAA,EAAD,CAAU5B,UAAWF,EAAQuB,UAC3B,kBAACzB,EAAoB+B,QCPhBE,MAbf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC8B,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACzB,EAAA,EAAD,CAAYE,QAAQ,MAApB,8BAGJ,kBAACc,EAAD,QCJcU,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b310c444.chunk.js","sourcesContent":["import React from \"react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nconst NAMESPACE = \"/myfirstpr\";\n\ninterface Contributor {\n  avatar?: string | undefined;\n  city?: string | undefined;\n  college?: string | undefined;\n  github?: string | undefined;\n  name?: string | undefined;\n  organization?: string | undefined;\n  quote?: string | undefined;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    cardRoot: {\n      display: \"flex\",\n    },\n    cardDetails: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    cardContent: {\n      flex: \"1 0 auto\",\n    },\n    cardCover: {\n      width: 151,\n    },\n  })\n);\n\nconst openGithubProfile = (username: string | undefined) => {\n  window.open(`https://github.com/${username}`, \"_blank\");\n};\n\nexport default function ContributorCard(props: Contributor) {\n  const classes = useStyles();\n\n  return (\n    <Card\n      className={classes.cardRoot}\n      onClick={() => openGithubProfile(props.github)}\n    >\n      <div className={classes.cardDetails}>\n        <CardContent className={classes.cardContent}>\n          <Typography component=\"h5\" variant=\"h5\">\n            {props.name}\n          </Typography>\n          {props.organization && (\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              {props.organization}\n            </Typography>\n          )}\n          {props.college && (\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              {props.college}\n            </Typography>\n          )}\n          {props.quote && (\n            <Typography variant=\"subtitle2\" color=\"textSecondary\">\n              {`- \"${props.quote}\"`}\n            </Typography>\n          )}\n        </CardContent>\n      </div>\n      <CardMedia\n        className={classes.cardCover}\n        image={`${NAMESPACE}/contributors/${props.avatar || \"default.png\"}`}\n        title={props.name}\n      />\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport contributors from \"./contributors.json\";\nimport ContributorCard from \"./Contributor\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n    },\n    inline: {\n      display: \"inline\",\n    },\n    listItem: {\n      justifyContent: \"center\",\n    },\n  })\n);\n\nexport default function Dashboard() {\n  const classes = useStyles();\n\n  return (\n    <List className={classes.root}>\n      {contributors.map((contributor) => (\n        <ListItem className={classes.listItem}>\n          <ContributorCard {...contributor} />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"./App.css\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">Hacktoberfest India 2020</Typography>\n        </Toolbar>\n      </AppBar>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}